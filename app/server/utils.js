/**
 * Set all of the API Variables
 */
var rovi = require('rovijs'),
	echo = require('echonestjs'),
	spotifyAPI = require('spotify-web-api-node'),
	async = require('async'),
	discogs = require("disconnect").Client,
	config = require('./config/config.js'),
	util = require('util');

/**
 * Initialize all of the Keys
 * The keys are stored in our config file
 */
rovi.init(config.rovi.key, config.rovi.secret);
echo.init(config.echo.key);
var dis = new discogs({userToken: 'xQSstXxQtGrcxUDRGSHJYjshQcuqYgbsBQlMKagH'});

var spotify = new spotifyAPI({
	clientId: config.spotify.clientId,
	clientSecret: config.spotify.secret
});

var db = dis.database();

/**
 * Finds influencers using the Rovi API
 * Returns an influencer's name
 * Unused in our Final Spire but the capability remains
 */
var findInflu = function(data, callback){
	rovi.get("name/influencers", { "name": data}, function (err, res) {
		if(err){
			console.error("influence not found");
			callback(err);
		}
		else{
			callback(null, res.influencers[0].name);
		}
	});
	
};

/**
 * Finds similar artists using the Echoest API
 * Returns a random top 5 artist data
 */
var findSimilar = function(data, callback){
	var artistnames = [data.first, data.second];

	echo.get("artist/similar", {"name": artistnames }, function (err, res) {
		if(err){
			console.error("similar artist not found");
			console.log(err);
		}
		else{
			var rando = Math.floor(Math.random()*5);
			callback(null, res.response.artists[rando]);
		}
	});
	
};

/** 
 * Find Images for artist using discogs
 * Returns an array of images
 */
var findPhoto = function(data, callback){
	db.search(data, {'type': 'artist'}, function(err, data){

		db.artist(data.results[0].id, function(err, data2) {
		   if(err){
				console.error("photo not found");
				console.log(err);
			}
			else{
				var imgArray = data2.images.map(function (img) {
					return {'url': img.resource_url}
				});
				callback(null, imgArray);
			}
		}); 
	});		
};


/**
 * Finds videos for given Artist
 * The URL needs to be edited to make it usable with iframes
 * Returns a URL to video as a strig=ng
 * Unused in our Final Spire but capability remains
 */
var findVideo = function(data, callback){
	echo.get("artist/video", { "name": data}, function (err, res) {
		if(err){
			console.log("video not found");
			console.log(err);
		}
		else{
			var oURL = res.response.video[0] ? res.response.video[0].url : "";
			var nURL = oURL.replace("http://www.dailymotion.com/", "http://www.dailymotion.com/embed/");
			
			callback(null, nURL);

		}
	});
};


/**
 * Helper function to turn names into spotify IDs
 * Returns ID as a string
 */
var findArtistId = function(data, callback){
	if(data == 'The Spice Girls'){
		data = 'Spice Girls';
	}

	spotify.searchArtists(data, {type: 'artist'}, function(err, res){
		if (err){
			console.log ('ID Error: ' + err);
		}
		else{
			callback(null, res.body.artists.items[0].id);
		}
	});
}

/**
 * Finds artist album art using Spotify API
 * Returns an array of image URLS
 */
var findAlbumArt = function(data, callback){
	findArtistId(data, function(err,res){
		if(err){
			console.log('ID Error: ' + err)
		}
		else{
			spotify.getArtistAlbums(res, 'US', function(err, res){
				if(err){
					console.log('Album Error: ' + err);
				}
				else{
					var imgArray = res.body.items.map(function (img) {
						if(img.images[0]){
							return {'url': img.images[0].url}
						}
						else{
							return {'url' : ''}
						}
					});
					callback(null, imgArray);				
				}
			});
		}
	});
}

/**
 * Finds a song for given artist
 * Returns a URL as a string
 */
var findSong = function(data, callback){
	findArtistId(data, function(err, res){
		if (err){
			console.log('ID Error: ' + err);
		}
		else{
			spotify.getArtistTopTracks(res, 'US', function(err, res){
				if (err){
					console.log('Song Error: ' + err);
				}
				else{
					spotify.getTrack(res.body.tracks[0].id, function(err, res){
						if (err){
							console.log('Song Error: ' + err);
						}
						else{
							callback(null, res.body.preview_url);
						}
					});
				}
			});
		}
	});
}


/**
 * Given the package generated by the makePackage
 * function, return a flattened version
 */
var flattenPackage = function(package) {
	var flat = {};
	
	/*
	 * For each section, add the url for the specified image if it exists.
	 * If it does not exist, add an empty string.
	 */
	if(package.first.name){
		flat.starting1 = package.first.name;
	} else {
		flat.starting1 = "";
	}

	if(package.second.name){
		flat.starting2 = package.second.name;
	} else {
		flat.starting2 = "";
	}

	if(package.similar.name){
		flat.similar = package.similar.name;
	} else {
		flat.similar = "";
	}


	if (package.first.images) {
		flat.artistImage11 = package.first.images[0] ? package.first.images[0].url : "";
		flat.artistImage12 = package.first.images[1] ? package.first.images[1].url : "";
	} else {
		flat.artistImage11 = "";
		flat.artistImage12 = "";
	}
	
	if (package.second.images) {
		flat.artistImage21 = package.second.images[0] ? package.second.images[0].url : "";
		flat.artistImage22 = package.second.images[1] ? package.second.images[1].url : "";	
	} else {
		flat.artistImage21 = "";
		flat.artistImage22 = "";
	}
	
	if (package.similar.images) {
		flat.mainArtist1 = package.similar.images[0] ? package.similar.images[0].url : "";
		flat.mainArtist2 = package.similar.images[1] ? package.similar.images[1].url : "";
		flat.mainArtist3 = package.similar.images[2] ? package.similar.images[2].url : "";
		flat.mainArtist4 = package.similar.images[3] ? package.similar.images[3].url : "";
		flat.mainArtist5 = package.similar.images[4] ? package.similar.images[4].url : "";
		flat.mainArtist6 = package.similar.images[5] ? package.similar.images[5].url : "";
		flat.mainArtist7 = package.similar.images[6] ? package.similar.images[6].url : "";
        flat.mainArtist8 = package.similar.images[7] ? package.similar.images[7].url : "";
	} else {
		flat.mainArtist1 = "";
		flat.mainArtist2 = "";
		flat.mainArtist3 = "";
		flat.mainArtist4 = "";
		flat.mainArtist5 = "";
		flat.mainArtist6 = "";
		flat.mainArtist7 = "";
		flat.mainArtist8 = "";
	}

	if (package.first.albums) {
		flat.albumImage11 = package.first.albums[0] ? package.first.albums[0].url : "";
		flat.albumImage12 = package.first.albums[1] ? package.first.albums[1].url : "";
	} else {
		flat.albumImage11 = "";
		flat.albumImage12 = "";
	}
	
	if (package.second.albums) {
		flat.albumImage21 = package.second.albums[0] ? package.second.albums[0].url : "";
		flat.albumImage22 = package.second.albums[1] ? package.second.albums[1].url : "";	
	} else {
		flat.albumImage21 = "";
		flat.albumImage22 = "";
	}
	
	if (package.similar.albums) {
		flat.mainAlbum1 = package.similar.albums[0] ? package.similar.albums[0].url : "";
		flat.mainAlbum2 = package.similar.albums[1] ? package.similar.albums[1].url : "";
		flat.mainAlbum3 = package.similar.albums[2] ? package.similar.albums[2].url : "";
		flat.mainAlbum4 = package.similar.albums[3] ? package.similar.albums[3].url : "";
		flat.mainAlbum5 = package.similar.albums[4] ? package.similar.albums[4].url : "";
		flat.mainAlbum6 = package.similar.albums[5] ? package.similar.albums[5].url : "";
		flat.mainAlbum7 = package.similar.albums[6] ? package.similar.albums[6].url : "";
        flat.mainAlbum8 = package.similar.albums[7] ? package.similar.albums[7].url : "";
	} else {
		flat.mainAlbum1 = "";
		flat.mainAlbum2 = "";
		flat.mainAlbum3 = "";
		flat.mainAlbum4 = "";
		flat.mainAlbum5 = "";
		flat.mainAlbum6 = "";
		flat.mainAlbum7 = "";
        flat.mainAlbum8 = "";
	}
	return flat;
};


/**
 * Creates an object with all artists' data
 * then sends it via Socket.IO
 * Calls previous helper functions
 * Returns an object 
 */
var makePackage = function(data, socket){
	var dataPackage = {
		first: {
			name: data.first,
			images: [],
			video: [],
			albums: [],
			influencers: []
		},
		second: {
			name: data.second,
			images: [],
			video: [],
			albums: [],
			influencers: []
		},
		similar: {
			name: '',
			images: [],
			video: [],
			albums: [],
			influencers: [],
			song: []
		}
	};

	/**
	 * Async.js allows us to call our functions
	 * concurrently and wait for a response from
	 * each function before continuing. If one call f
	 * fails, they all fail.
	 */
	async.parallel(
		{
			firstVideo: function(callback){
				findVideo(data.first, callback);
			},
			secondVideo: function(callback){
				findVideo(data.second, callback);
			},
			firstImg: function(callback){
				findPhoto(data.first, callback);
			},
			secondImg: function(callback){
				findPhoto(data.second, callback);
			},
			firstAlbumArt: function(callback){
				findAlbumArt(data.first, callback);
			},
			secondAlbumArt: function(callback){
				findAlbumArt(data.second, callback);
			},
			/*firstInflu: function(callback){
				findInflu(data.first, callback);
			},
			secondInflu: function(callback){
				findInflu(data.second, callback);
			},*/
			similar: function(callback){
				findSimilar(data, callback);
			}
		},
		function(err, results){
			if (err){
				console.log('First Sync Error: ' + err);
			}
			dataPackage.first.video.push({'url': results.firstVideo});
			dataPackage.second.video.push({'url':results.secondVideo});

			dataPackage.first.images = results.firstImg;
			dataPackage.second.images = results.secondImg;

			dataPackage.first.albums = results.firstAlbumArt;
			dataPackage.second.albums = results.secondAlbumArt;

			dataPackage.similar.name = results.similar.name;

			/*dataPackage.first.influencers.push({'name':results.firstInflu});
			dataPackage.second.influencers.push({'name':results.secondInflu});*/

			async.parallel(
				{
					similarVideo: function(callback){
						findVideo(results.similar.name, callback);
					},
					similarImg: function(callback){
						findPhoto(results.similar.name, callback);
					},
					similarAlbumArt: function(callback){
						findAlbumArt(results.similar.name, callback);
					},
					similarSong: function(callback){
						findSong(results.similar.name, callback);
					}
					/*similarInflu: function(callback){
						findInflu(results.similar.name, callback);
					}*/
				},
				function(err,results){
					if (err){
						console.log('Second Sync Error: ' + err);
					}
					dataPackage.similar.video.push({'url': results.similarVideo});
					dataPackage.similar.images = results.similarImg;
					dataPackage.similar.song = results.similarSong;
					dataPackage.similar.albums = results.similarAlbumArt;
					//dataPackage.similar.influencers.push({'name':results.similarInflu});

					dataPackage.similar.song = results.similarSong;
					
					var flatPackage = flattenPackage(dataPackage);
					socket.broadcast.to("AssetShare").emit('flat-package', flatPackage);
					socket.broadcast.to("AssetShare").emit('package', dataPackage);
					socket.emit('package', dataPackage);
					
					// similar event
					var similarPackage = {
						name: dataPackage.similar.name,
						image: dataPackage.similar.images[0]
					};
					socket.emit('similarArtist', similarPackage);
				}
			);
		}
	);
};

module.exports.makePackage = makePackage;
module.exports.findAlbumArt = findAlbumArt;